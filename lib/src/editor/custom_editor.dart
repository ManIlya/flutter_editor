import 'package:flutter/material.dart';
import 'package:float_column/float_column.dart';
import 'package:image_picker/image_picker.dart' as picker;
import 'dart:math';
import 'dart:ui' show lerpDouble;
import 'dart:typed_data';
import 'package:flutter_editor/flutter_editor.dart';
import '../widgets/toolbar.dart';
import '../models/document_model.dart';
import '../widgets/text_editor.dart'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ StyledTextEditingController

/// –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
enum ImageSourceType {
  /// URL-—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  link,

  /// –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  file,
}

/// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ URL
typedef FileToUrlConverter = Future<String?> Function(Uint8List fileData, String fileName);

class CustomEditor extends StatefulWidget {
  final DocumentModel initialDocument;
  final Function(DocumentModel)? onDocumentChanged;
  final bool enableLogging;

  /// –ö–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ URL
  /// –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  final FileToUrlConverter? fileToUrlConverter;

  /// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  final List<Widget>? customToolbarItems;

  /// –í—ã—Å–æ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö
  /// –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ (null), –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤—Å—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤—ã—Å–æ—Ç–∞
  final double? editorHeight;

  const CustomEditor({
    Key? key,
    required this.initialDocument,
    this.onDocumentChanged,
    this.enableLogging = false,
    this.fileToUrlConverter,
    this.customToolbarItems,
    this.editorHeight = 750,
  }) : super(key: key);

  @override
  State<CustomEditor> createState() => _CustomEditorState();
}

class _CustomEditorState extends State<CustomEditor> {
  late DocumentModel _document;
  final FocusNode _focusNode = FocusNode();
  int? _selectedIndex;
  TextSelection? _selection;
  // –¢–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ float –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  FCFloat _currentImageFloat = FCFloat.start;

  @override
  void initState() {
    super.initState();
    _document = widget.initialDocument.copy();
  }

  @override
  void dispose() {
    _focusNode.dispose();
    super.dispose();
  }

  void _addImage() async {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    final selectedSource = await _showImageSourceDialog();
    if (selectedSource == null) return;

    String? imageUrl;

    if (selectedSource == ImageSourceType.file) {
      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
      final picker.ImagePicker imagePicker = picker.ImagePicker();
      final picker.XFile? imageFile = await imagePicker.pickImage(source: picker.ImageSource.gallery);

      if (imageFile == null) return;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ñ–∞–π–ª–∞ –≤ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (widget.fileToUrlConverter != null) {
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        final Uint8List fileData = await imageFile.readAsBytes();
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∫–æ–ª–±—ç–∫
        imageUrl = await widget.fileToUrlConverter!(fileData, imageFile.name);
      }

      // –ï—Å–ª–∏ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      if (imageUrl == null) {
        if (widget.enableLogging) print('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É');
        imageUrl = 'https://storage.yandexcloud.net/vrnm/aad3dc7c4ebeed752ec109_800.jpg';
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ URL
      imageUrl = await _showImageUrlDialog();
      if (imageUrl == null || imageUrl.isEmpty) return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    final imageElement = ImageElement(
      imageUrl: imageUrl,
      caption: '',
      alignment: Alignment.center,
      sizePercent: 40.0, // 50% –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      sizeType: 'screen', // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —ç–∫—Ä–∞–Ω–∞
    );

    setState(() {
      _document.addElement(imageElement);
      _selectedIndex = _document.elements.length - 1;
      _notifyDocumentChanged();
    });
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  Future<ImageSourceType?> _showImageSourceDialog() async {
    return await showDialog<ImageSourceType>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.link),
                title: const Text('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É'),
                onTap: () => Navigator.of(context).pop(ImageSourceType.link),
              ),
              ListTile(
                leading: const Icon(Icons.photo_library),
                title: const Text('–í—ã–±—Ä–∞—Ç—å –∏–∑ –≥–∞–ª–µ—Ä–µ–∏'),
                onTap: () => Navigator.of(context).pop(ImageSourceType.file),
              ),
            ],
          ),
        );
      },
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤–≤–æ–¥–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  Future<String?> _showImageUrlDialog() async {
    final TextEditingController controller = TextEditingController();

    return await showDialog<String>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
          content: TextField(
            controller: controller,
            decoration: const InputDecoration(hintText: 'https://example.com/image.jpg', labelText: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
          ),
          actions: [
            TextButton(onPressed: () => Navigator.of(context).pop(), child: const Text('–û—Ç–º–µ–Ω–∞')),
            TextButton(onPressed: () => Navigator.of(context).pop(controller.text), child: const Text('–î–æ–±–∞–≤–∏—Ç—å')),
          ],
        );
      },
    );
  }

  void _updateTextElement(int index, String newText) {
    if (index >= 0 && index < _document.elements.length) {
      if (_document.elements[index] is TextElement) {
        final textElement = _document.elements[index] as TextElement;

        if (widget.enableLogging) {
          print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
          print('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê:');
          print('–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç: "${StyledTextEditingController.formatSpanText(textElement.text)}"');
          print('–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: "${StyledTextEditingController.formatSpanText(newText)}"');
        }

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∞–Ω–æ–≤ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (widget.enableLogging) {
          print('–°–¢–†–£–ö–¢–£–†–ê –°–ü–ê–ù–û–í –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
          int currentPos = 0;
          for (int i = 0; i < textElement.spans.length; i++) {
            final span = textElement.spans[i];
            final spanStart = currentPos;
            final spanEnd = currentPos + span.text.length;

            final bool isBold = span.style.bold;
            final bool isItalic = span.style.italic;
            final bool isUnderline = span.style.underline;
            final String styleMarkers = [if (isBold) '–ñ', if (isItalic) '–ö', if (isUnderline) '–ü'].join('');

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ø–∞–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            String displayText = StyledTextEditingController.formatSpanText(span.text);

            print('–°–ø–∞–Ω #$i [$spanStart-$spanEnd]: ${styleMarkers.isNotEmpty ? "[$styleMarkers] " : ""}"$displayText"');
            currentPos = spanEnd;
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        final String updatedText = newText;

        // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        Future.microtask(() {
          if (mounted) {
            if (_selection != null && _selection!.start != _selection!.end) {
              // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª–µ–π
              if (widget.enableLogging)
                print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º: ${_selection!.start}-${_selection!.end}');

              // –í–∞–∂–Ω–æ! TextEditor —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
              // –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ newText, –Ω–æ –Ω–µ spans
              if (textElement.text != updatedText) {
                textElement.text = updatedText;
              }
            } else {
              // –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
              if (textElement.spans.length <= 1) {
                textElement.text = updatedText;
                if (widget.enableLogging) print('–û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ (–æ–¥–∏–Ω —Å–ø–∞–Ω)');
              } else {
                if (widget.enableLogging) print('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø–∞–Ω–æ–≤...');
                _updateTextElementWithSpans(textElement, updatedText);
              }
            }

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ø–∞–Ω–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if (widget.enableLogging) {
              print('–°–¢–†–£–ö–¢–£–†–ê –°–ü–ê–ù–û–í –ü–û–°–õ–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
              int posAfter = 0;
              for (int i = 0; i < textElement.spans.length; i++) {
                final span = textElement.spans[i];
                final spanStart = posAfter;
                final spanEnd = posAfter + span.text.length;

                final bool isBold = span.style.bold;
                final bool isItalic = span.style.italic;
                final bool isUnderline = span.style.underline;
                final String styleMarkers = [if (isBold) '–ñ', if (isItalic) '–ö', if (isUnderline) '–ü'].join('');

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–ø–∞–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                String displayText = StyledTextEditingController.formatSpanText(span.text);

                print(
                  '–°–ø–∞–Ω #$i [$spanStart-$spanEnd]: ${styleMarkers.isNotEmpty ? "[$styleMarkers] " : ""}"$displayText"',
                );
                posAfter = spanEnd;
              }
              print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
            }

            // –ï–¥–∏–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (mounted) {
              setState(() {
                // –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–µ–π—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞
              });

              // –û—Ç–¥–µ–ª—å–Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
              _notifyDocumentChanged();
            }
          }
        });
      }
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  void _updateImageElement(int index, ImageElement newImageElement) {
    if (index >= 0 && index < _document.elements.length) {
      if (_document.elements[index] is ImageElement) {
        setState(() {
          _document.elements[index] = newImageElement;
          _notifyDocumentChanged();
        });
      }
    }
  }

  // –ò–∑–º–µ–Ω—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ float –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  void _changeImageFloat(FCFloat float) {
    setState(() {
      _currentImageFloat = float;
    });
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–∞–Ω–∞—Ö
  void _updateTextElementWithSpans(TextElement element, String newText) {
    final String oldText = element.text;

    if (widget.enableLogging) {
      print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      print('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –°–¢–ò–õ–ï–ô:');
      print('–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç: "${StyledTextEditingController.formatSpanText(oldText)}"');
      print('–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: "${StyledTextEditingController.formatSpanText(newText)}"');
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (oldText == newText) {
      if (widget.enableLogging) print('–¢–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤—ã—Ö–æ–¥–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)
    final isAddition = newText.length > oldText.length;
    final isDeletion = newText.length < oldText.length;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–∏–±–æ–ª—å—à–µ–π –æ–±—â–µ–π –ø–æ–¥–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    // –ø–æ–∑–∏—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    int commonPrefixLength = 0;
    int minLength = min(oldText.length, newText.length);

    // –ò—â–µ–º –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
    while (commonPrefixLength < minLength && oldText[commonPrefixLength] == newText[commonPrefixLength]) {
      commonPrefixLength++;
    }

    if (widget.enableLogging) print('–ù–∞–π–¥–µ–Ω –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª–∏–Ω–æ–π $commonPrefixLength —Å–∏–º–≤–æ–ª–æ–≤');

    // –ï—Å–ª–∏ —É –Ω–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    if (isAddition) {
      if (widget.enableLogging) print('‚ûï –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞');

      // –ü–æ–∑–∏—Ü–∏—è, –≥–¥–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
      final insertPosition = commonPrefixLength;
      final addedLength = newText.length - oldText.length;
      final addedText = newText.substring(insertPosition, insertPosition + addedLength);

      if (widget.enableLogging) print('–ü–æ–∑–∏—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏: $insertPosition');
      if (widget.enableLogging) print('–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${StyledTextEditingController.formatSpanText(addedText)}"');

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø–∞–Ω—ã
      List<TextSpanDocument> newSpans = [];
      int currentPos = 0;

      for (int i = 0; i < element.spans.length; i++) {
        final span = element.spans[i];
        final spanStart = currentPos;
        final spanEnd = currentPos + span.text.length;

        if (widget.enableLogging)
          print(
              '–ê–Ω–∞–ª–∏–∑ —Å–ø–∞–Ω–∞ #$i: "${StyledTextEditingController.formatSpanText(span.text)}" –ø–æ–∑–∏—Ü–∏—è [$spanStart-$spanEnd]');

        // –ï—Å–ª–∏ –≤—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —Å–ø–∞–Ω–∞
        if (insertPosition >= spanStart && insertPosition <= spanEnd) {
          if (widget.enableLogging) print('–í—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤ —Å–ø–∞–Ω–µ #$i');

          // –¢–µ–∫—Å—Ç –¥–æ –≤—Å—Ç–∞–≤–∫–∏
          if (insertPosition > spanStart) {
            final beforeText = span.text.substring(0, insertPosition - spanStart);
            newSpans.add(TextSpanDocument(text: beforeText, style: span.style));
            if (widget.enableLogging)
              print(
                  '–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–æ –≤—Å—Ç–∞–≤–∫–∏: "${StyledTextEditingController.formatSpanText(beforeText)}" (—Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å)');
          }

          // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (—Å —Ç–µ–º –∂–µ —Å—Ç–∏–ª–µ–º, —á—Ç–æ –∏ —Å–ø–∞–Ω, –≥–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Å—Ç–∞–≤–∫–∞)
          newSpans.add(TextSpanDocument(text: addedText, style: span.style));
          if (widget.enableLogging)
            print(
                '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç: "${StyledTextEditingController.formatSpanText(addedText)}" (—Å—Ç–∏–ª—å: bold=${span.style.bold}, italic=${span.style.italic})');

          // –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
          if (insertPosition - spanStart < span.text.length) {
            final afterText = span.text.substring(insertPosition - spanStart);
            newSpans.add(TextSpanDocument(text: afterText, style: span.style));
            if (widget.enableLogging)
              print(
                  '–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏: "${StyledTextEditingController.formatSpanText(afterText)}" (—Ç–æ—Ç –∂–µ —Å—Ç–∏–ª—å)');
          }
        }
        // –ï—Å–ª–∏ —Å–ø–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ –º–µ—Å—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏
        else if (spanEnd <= insertPosition) {
          newSpans.add(span);
          if (widget.enableLogging) print('–°–ø–∞–Ω –¥–æ –º–µ—Å—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        }
        // –ï—Å–ª–∏ —Å–ø–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ –º–µ—Å—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏
        else {
          final textAfterInsert = span.text;
          newSpans.add(TextSpanDocument(text: textAfterInsert, style: span.style));
          if (widget.enableLogging)
            print(
                '–°–ø–∞–Ω –ø–æ—Å–ª–µ –º–µ—Å—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: "${StyledTextEditingController.formatSpanText(textAfterInsert)}"');
        }

        currentPos = spanEnd;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã —Å–æ–∑–¥–∞–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∞–Ω
      if (newSpans.isEmpty) {
        if (widget.enableLogging) print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∞–Ω–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞');
        final style = element.spans.isNotEmpty ? element.spans[0].style : TextStyleAttributes();
        element.spans = [TextSpanDocument(text: newText, style: style)];
      } else {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ø–∞–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        element.spans = _mergeAdjacentSpans(newSpans);
        if (widget.enableLogging) print('–°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ —Å–ø–∞–Ω—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (${element.spans.length})');
      }
    }
    // –ï—Å–ª–∏ —É –Ω–∞—Å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    else if (isDeletion) {
      if (widget.enableLogging) print('‚ûñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞');

      // –ò—â–µ–º –æ–±—â–∏–π —Å—É—Ñ—Ñ–∏–∫—Å
      int commonSuffixLength = 0;
      while (commonSuffixLength < minLength &&
          oldText[oldText.length - 1 - commonSuffixLength] == newText[newText.length - 1 - commonSuffixLength]) {
        commonSuffixLength++;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
      final deleteStart = commonPrefixLength;
      final deleteEnd = oldText.length - commonSuffixLength;
      final deletedText = oldText.substring(deleteStart, deleteEnd);

      if (widget.enableLogging) print('–ü–æ–∑–∏—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è: $deleteStart-$deleteEnd');
      if (widget.enableLogging) print('–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${StyledTextEditingController.formatSpanText(deletedText)}"');

      // –°—Ç—Ä–æ–∏–º –Ω–æ–≤—ã–µ —Å–ø–∞–Ω—ã —Å —É—á–µ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è
      List<TextSpanDocument> newSpans = [];
      int currentPos = 0;

      for (int i = 0; i < element.spans.length; i++) {
        final span = element.spans[i];
        final spanStart = currentPos;
        final spanEnd = currentPos + span.text.length;

        if (widget.enableLogging)
          print(
              '–ê–Ω–∞–ª–∏–∑ —Å–ø–∞–Ω–∞ #$i: "${StyledTextEditingController.formatSpanText(span.text)}" –ø–æ–∑–∏—Ü–∏—è [$spanStart-$spanEnd]');

        // –°–ø–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
        if (spanEnd <= deleteStart) {
          newSpans.add(span);
          if (widget.enableLogging) print('–°–ø–∞–Ω –¥–æ —É–¥–∞–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        }
        // –°–ø–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        else if (spanStart >= deleteEnd) {
          // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          final newSpanStart = spanStart - (deleteEnd - deleteStart);
          final newText = span.text;
          newSpans.add(TextSpanDocument(text: newText, style: span.style));
          if (widget.enableLogging)
            print('–°–ø–∞–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º: "${StyledTextEditingController.formatSpanText(newText)}"');
        }
        // –°–ø–∞–Ω –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —É–¥–∞–ª–µ–Ω–∏–µ–º
        else {
          // –ß–∞—Å—Ç—å –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
          if (spanStart < deleteStart) {
            final beforeText = span.text.substring(0, deleteStart - spanStart);
            newSpans.add(TextSpanDocument(text: beforeText, style: span.style));
            if (widget.enableLogging)
              print('–î–æ–±–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å —Å–ø–∞–Ω–∞ –¥–æ —É–¥–∞–ª–µ–Ω–∏—è: "${StyledTextEditingController.formatSpanText(beforeText)}"');
          }

          // –ß–∞—Å—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
          if (spanEnd > deleteEnd) {
            final afterText = span.text.substring(deleteEnd - spanStart);
            newSpans.add(TextSpanDocument(text: afterText, style: span.style));
            if (widget.enableLogging)
              print('–î–æ–±–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å —Å–ø–∞–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: "${StyledTextEditingController.formatSpanText(afterText)}"');
          }
        }

        currentPos = spanEnd;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã —Å–æ–∑–¥–∞–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∞–Ω
      if (newSpans.isEmpty) {
        if (widget.enableLogging) print('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∞–Ω–∞ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞');
        final style = element.spans.isNotEmpty ? element.spans[0].style : TextStyleAttributes();
        element.spans = [TextSpanDocument(text: newText, style: style)];
      } else {
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ø–∞–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        element.spans = _mergeAdjacentSpans(newSpans);
        if (widget.enableLogging) print('–°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ —Å–ø–∞–Ω—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (${element.spans.length})');
      }
    }
    // –í —Ä–µ–¥–∫–∏—Ö —Å–ª—É—á–∞—è—Ö, –∫–æ–≥–¥–∞ –º—ã –Ω–µ –º–æ–∂–µ–º —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    else {
      if (widget.enableLogging) print('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç
      element.text = newText;
    }

    if (widget.enableLogging) print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  }

  // –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ø–∞–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  List<TextSpanDocument> _mergeAdjacentSpans(List<TextSpanDocument> spans) {
    if (spans.length <= 1) return spans;

    if (widget.enableLogging) print('–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å–ø–∞–Ω–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏...');
    final result = <TextSpanDocument>[];
    TextSpanDocument? currentSpan;

    for (final span in spans) {
      if (currentSpan == null) {
        currentSpan = span;
      } else if (_areStylesEqual(currentSpan.style, span.style)) {
        // –ï—Å–ª–∏ —Å—Ç–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        currentSpan = TextSpanDocument(text: currentSpan.text + span.text, style: currentSpan.style);
        if (widget.enableLogging)
          print(
              '–û–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Å–ø–∞–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Å—Ç–∏–ª—è–º–∏: "${StyledTextEditingController.formatSpanText(currentSpan.text)}"');
      } else {
        // –ï—Å–ª–∏ —Å—Ç–∏–ª–∏ —Ä–∞–∑–Ω—ã–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∞–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
        result.add(currentSpan);
        currentSpan = span;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∞–Ω
    if (currentSpan != null) {
      result.add(currentSpan);
    }

    if (widget.enableLogging) print('–ü–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: –±—ã–ª–æ ${spans.length} —Å–ø–∞–Ω–æ–≤, —Å—Ç–∞–ª–æ ${result.length}');
    return result;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–≤–Ω—ã –ª–∏ —Å—Ç–∏–ª–∏ –¥–≤—É—Ö —Å–ø–∞–Ω–æ–≤
  bool _areStylesEqual(TextStyleAttributes a, TextStyleAttributes b) {
    return a.bold == b.bold &&
        a.italic == b.italic &&
        a.underline == b.underline &&
        a.color == b.color &&
        a.link == b.link &&
        a.alignment == b.alignment;
  }

  void _addNewTextElement() {
    final newTextElement = TextElement(text: '');
    setState(() {
      _document.addElement(newTextElement);
      _selectedIndex = _document.elements.length - 1;
      _notifyDocumentChanged();
    });
  }

  // –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
  void _removeElement(int index) {
    if (index < 0 || index >= _document.elements.length) return;

    setState(() {
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–∏–ø —É–¥–∞–ª—è–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      final elementType = _document.elements[index] is TextElement ? '—Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫' : '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
      if (widget.enableLogging) print('–£–¥–∞–ª—è–µ–º $elementType —Å –∏–Ω–¥–µ–∫—Å–æ–º $index');

      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      _document.elements.removeAt(index);

      // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω —É–¥–∞–ª—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç
      if (_selectedIndex == index) {
        _selectedIndex = null;
        _selection = null;
      } else if (_selectedIndex != null && _selectedIndex! > index) {
        // –ï—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ –∏–Ω–¥–µ–∫—Å
        _selectedIndex = _selectedIndex! - 1;
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      _notifyDocumentChanged();
    });
  }

  // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
  void _notifyDocumentChanged() {
    Future.microtask(() {
      if (mounted) {
        widget.onDocumentChanged?.call(_document);
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  void _handleSelectionChanged(TextSelection selection) {
    if (_selection?.start != selection.start || _selection?.end != selection.end) {
      setState(() {
        _selection = selection;

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–µ–ª–µ–Ω–∏–∏
        if (widget.enableLogging) print('–í—ã–¥–µ–ª–µ–Ω–∏–µ: start=${selection.start}, end=${selection.end}');

        // –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ (–Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—É—Ä—Å–æ—Ä)
        if (selection.start != selection.end && _selectedIndex != null) {
          if (widget.enableLogging) print('–¢–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω –æ—Ç ${selection.start} –¥–æ ${selection.end}');

          // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          if (_document.elements[_selectedIndex!] is TextElement) {
            final textElement = _document.elements[_selectedIndex!] as TextElement;
            final style = textElement.styleAt(selection.start);
            if (widget.enableLogging)
              print(
                '–°—Ç–∏–ª—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: bold=${style?.bold}, italic=${style?.italic}, underline=${style?.underline}',
              );
          }
        }
      });
    }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–ø –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  void _handleImageTap(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–ø –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  void _handleParagraphTap(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
  void _applyFormatting(TextStyleAttributes Function(TextStyleAttributes) styleUpdater) {
    if (_selection == null || _selection!.start == _selection!.end || _selectedIndex == null) {
      return;
    }

    if (_document.elements[_selectedIndex!] is TextElement) {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
      final textElement = _document.elements[_selectedIndex!] as TextElement;
      final currentStyle = textElement.styleAt(_selection!.start) ?? textElement.style;
      final newStyle = styleUpdater(currentStyle);

      setState(() {
        textElement.applyStyle(newStyle, _selection!.start, _selection!.end);
        _notifyDocumentChanged();
      });
    }
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  void _clearFormatting() {
    if (_selection == null || _selection!.start == _selection!.end || _selectedIndex == null) {
      return;
    }

    if (_document.elements[_selectedIndex!] is TextElement) {
      final textElement = _document.elements[_selectedIndex!] as TextElement;

      if (widget.enableLogging) {
        print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        print('üßπ –°–ë–†–û–° –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:');
        print('–î–∏–∞–ø–∞–∑–æ–Ω: ${_selection!.start}-${_selection!.end}');
      }

      // –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      final plainStyle = TextStyleAttributes(bold: false, italic: false, underline: false, link: null);

      if (widget.enableLogging) print('–ù–æ–≤—ã–π —Å—Ç–∏–ª—å: bold=false, italic=false, underline=false, link=null');

      setState(() {
        textElement.applyStyle(plainStyle, _selection!.start, _selection!.end);
        _notifyDocumentChanged();

        if (widget.enableLogging) print('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.');
        if (widget.enableLogging) print('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
      });
    }
  }

  /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è EditorToolbar
  EditorSelectionContext _buildSelectionContext() {
    if (_selectedIndex == null) {
      return const EditorSelectionContext(type: SelectedElementType.none);
    }

    if (_selectedIndex! >= 0 && _selectedIndex! < _document.elements.length) {
      final element = _document.elements[_selectedIndex!];

      if (element is TextElement) {
        return EditorSelectionContext(
          type: SelectedElementType.text,
          elementIndex: _selectedIndex,
          textElement: element,
          textSelection: _selection,
        );
      } else if (element is ImageElement) {
        return EditorSelectionContext(
          type: SelectedElementType.image,
          elementIndex: _selectedIndex,
          imageElement: element,
        );
      }
    }

    return const EditorSelectionContext(type: SelectedElementType.none);
  }

  @override
  Widget build(BuildContext context) {
    final editorTheme = EditorThemeExtension.of(context);

    // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    final editorContent = Column(
      children: [
        Container(
          padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 4.0),
          decoration: BoxDecoration(
            color: editorTheme.toolbarColor,
            borderRadius: BorderRadius.circular(editorTheme.borderRadius),
            border: Border.all(color: editorTheme.borderColor),
          ),
          child: EditorToolbar(
            onBoldPressed: () => _applyFormatting((style) => style.copyWith(bold: !style.bold)),
            onItalicPressed: () => _applyFormatting((style) => style.copyWith(italic: !style.italic)),
            onUnderlinePressed: () => _applyFormatting((style) => style.copyWith(underline: !style.underline)),
            onClearFormattingPressed: _clearFormatting,
            onAddImagePressed: _addImage,
            onAddTextPressed: _addNewTextElement,
            customToolbarItems: widget.customToolbarItems,
            selectionContext: _buildSelectionContext(),
          ),
        ),
        if (_selectedIndex != null && _document.elements[_selectedIndex!] is ImageElement) _buildImageFloatToolbar(),
        Expanded(
          child: Container(
            margin: const EdgeInsets.only(top: 8.0),
            padding: EdgeInsets.all(editorTheme.elementSpacing),
            decoration: BoxDecoration(
              color: editorTheme.backgroundColor,
              border: Border.all(color: editorTheme.borderColor),
              borderRadius: editorTheme.containerBorderRadius,
              boxShadow: [editorTheme.containerShadow],
            ),
            child: _buildReorderableDocumentView(),
          ),
        ),
      ],
    );

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤—ã—Å–æ—Ç–∞, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤–µ—Å—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π
    if (widget.editorHeight != null) {
      return SizedBox(height: widget.editorHeight, child: editorContent);
    } else {
      // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã
      return editorContent;
    }
  }

  // –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  Widget _buildImageFloatToolbar() {
    final editorTheme = EditorThemeExtension.of(context);

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      decoration: BoxDecoration(
        color: editorTheme.toolbarColor,
        borderRadius: BorderRadius.circular(editorTheme.borderRadius),
        border: Border.all(color: editorTheme.borderColor),
      ),
      margin: const EdgeInsets.symmetric(vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            '–ü–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ',
            style: TextStyle(fontWeight: FontWeight.bold, color: editorTheme.defaultTextStyle.color),
          ),
          const SizedBox(width: 16),
          ToggleButtons(
            isSelected: [
              _currentImageFloat == FCFloat.start,
              _currentImageFloat == FCFloat.none,
              _currentImageFloat == FCFloat.end,
            ],
            onPressed: (index) {
              setState(() {
                if (index == 0)
                  _currentImageFloat = FCFloat.start;
                else if (index == 1)
                  _currentImageFloat = FCFloat.none;
                else if (index == 2) _currentImageFloat = FCFloat.end;

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if (_selectedIndex != null && _document.elements[_selectedIndex!] is ImageElement) {
                  final imageElement = _document.elements[_selectedIndex!] as ImageElement;

                  AlignmentGeometry alignment;
                  if (_currentImageFloat == FCFloat.start)
                    alignment = Alignment.centerLeft;
                  else if (_currentImageFloat == FCFloat.end)
                    alignment = Alignment.centerRight;
                  else
                    alignment = Alignment.center;

                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º copyWith –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤
                  _updateImageElement(_selectedIndex!, imageElement.copyWith(alignment: alignment));
                }
              });
            },
            borderRadius: BorderRadius.circular(editorTheme.borderRadius / 2),
            selectedColor: editorTheme.toolbarSelectedIconColor,
            color: editorTheme.toolbarIconColor,
            fillColor: editorTheme.selectedBackgroundColor,
            children: const [
              Icon(Icons.format_align_left),
              Icon(Icons.format_align_center),
              Icon(Icons.format_align_right),
            ],
          ),
        ],
      ),
    );
  }

  // –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
  Widget _buildReorderableDocumentView() {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤ –¥–ª—è ReorderableListView
    final List<Widget> documentBlocks = [];

    for (int i = 0; i < _document.elements.length; i++) {
      final element = _document.elements[i];

      if (element is TextElement) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
        documentBlocks.add(_buildDraggableTextBlock(element, i));
      } else if (element is ImageElement) {
        // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        documentBlocks.add(_buildDraggableImageBlock(element, i));
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ScrollView –≤–æ–∫—Ä—É–≥ ReorderableListView –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    return ReorderableListView.builder(
      buildDefaultDragHandles: false, // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª –≤–Ω—É—Ç—Ä–∏ ListView
      itemCount: documentBlocks.length,
      itemBuilder: (context, index) =>
          Container(key: ValueKey('$index'), padding: EdgeInsets.only(bottom: 16), child: documentBlocks[index]),
      proxyDecorator: (child, index, animation) {
        return AnimatedBuilder(
          animation: animation,
          builder: (BuildContext context, Widget? _) {
            final double animValue = Curves.easeInOut.transform(animation.value);
            final double elevation = lerpDouble(0, 8, animValue)!;
            final double scale = lerpDouble(1, 1.02, animValue)!;

            return Container(
              margin: const EdgeInsets.only(bottom: 16.0),
              child: Transform.scale(
                scale: scale,
                child: Material(
                  elevation: elevation,
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(4.0),
                  child: documentBlocks[index],
                ),
              ),
            );
          },
          child: child,
        );
      },
      onReorder: (oldIndex, newIndex) {
        setState(() {
          // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤–Ω–∏–∑
          if (oldIndex < newIndex) {
            newIndex -= 1;
          }

          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
          final item = _document.elements.removeAt(oldIndex);
          _document.elements.insert(newIndex, item);

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
          if (_selectedIndex == oldIndex) {
            _selectedIndex = newIndex;
          } else if (_selectedIndex != null) {
            if (_selectedIndex! > oldIndex && _selectedIndex! <= newIndex) {
              _selectedIndex = _selectedIndex! - 1;
            } else if (_selectedIndex! < oldIndex && _selectedIndex! >= newIndex) {
              _selectedIndex = _selectedIndex! + 1;
            }
          }

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
          _notifyDocumentChanged();
        });
      },
      footer: Padding(
        padding: const EdgeInsets.only(top: 16.0),
        child: Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              OutlinedButton.icon(
                icon: const Icon(Icons.add),
                label: const Text('–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞'),
                onPressed: _addNewTextElement,
              ),
              const SizedBox(width: 16.0),
              OutlinedButton.icon(
                icon: const Icon(Icons.image),
                label: const Text('–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
                onPressed: _addImage,
              ),
            ],
          ),
        ),
      ),
    );
  }

  // –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  Widget _buildDraggableTextBlock(TextElement element, int index) {
    final isSelected = _selectedIndex == index;

    return Container(
      key: ValueKey('text_$index'),
      decoration: BoxDecoration(
        border: Border.all(
          color: isSelected ? Colors.blue.withOpacity(0.5) : Colors.grey.withOpacity(0.2),
          width: isSelected ? 2.0 : 1.0,
        ),
        borderRadius: BorderRadius.circular(4.0),
        color: isSelected ? Colors.blue.withOpacity(0.05) : Colors.transparent,
      ),
      child: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.only(left: 24.0 + 8, right: 8.0, top: 8.0, bottom: 8.0),
            child: TextEditor(
              text: element.text,
              style: element.style,
              spans: element.spans,
              isSelected: isSelected,
              onTap: () {
                setState(() {
                  _selectedIndex = index;
                });
              },
              onTextChanged: (text) => _updateTextElement(index, text),
              onSpansChanged: (newSpans) {
                // –û–±–Ω–æ–≤–ª—è–µ–º spans –≤ TextElement –Ω–∞–ø—Ä—è–º—É—é
                if (index >= 0 && index < _document.elements.length && _document.elements[index] is TextElement) {
                  setState(() {
                    final textElement = _document.elements[index] as TextElement;
                    textElement.spans = newSpans;
                    _notifyDocumentChanged();
                  });
                }
              },
              onSelectionChanged: _handleSelectionChanged,
              onDelete: () => _removeElement(index),
              enableLogging: widget.enableLogging,
              onOverflow: _handleTextOverflow,
            ),
          ),
          // –†—É–∫–æ—è—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          Positioned(
            left: 0,
            top: 0,
            bottom: 0,
            child: ReorderableDragStartListener(
              index: index,
              child: Container(
                width: 24.0,
                alignment: Alignment.center,
                decoration: BoxDecoration(
                  color: isSelected ? Colors.blue.withOpacity(0.1) : Colors.grey.withOpacity(0.1),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(3.0),
                    bottomLeft: Radius.circular(3.0),
                  ),
                ),
                child: Icon(
                  Icons.drag_handle,
                  size: 16.0,
                  color: isSelected ? Colors.blue.withOpacity(0.7) : Colors.grey.withOpacity(0.7),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // –°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  Widget _buildDraggableImageBlock(ImageElement element, int index) {
    final isSelected = _selectedIndex == index;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º float –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
    FCFloat float;
    if (element.alignment == Alignment.centerLeft)
      float = FCFloat.start;
    else if (element.alignment == Alignment.centerRight)
      float = FCFloat.end;
    else
      float = FCFloat.none;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è
    EdgeInsets padding;
    if (float == FCFloat.start) {
      padding = const EdgeInsets.only(right: 16.0, bottom: 8.0);
    } else if (float == FCFloat.end) {
      padding = const EdgeInsets.only(left: 16.0, bottom: 8.0);
    } else {
      padding = const EdgeInsets.only(bottom: 8.0);
    }

    return Container(
      key: ValueKey('image_$index'),
      decoration: BoxDecoration(
        border: Border.all(
          color: isSelected ? Colors.blue.withOpacity(0.5) : Colors.grey.withOpacity(0.2),
          width: isSelected ? 2.0 : 1.0,
        ),
        borderRadius: BorderRadius.circular(4.0),
        color: isSelected ? Colors.blue.withOpacity(0.05) : Colors.transparent,
      ),
      child: Stack(
        children: [
          Padding(
            padding: const EdgeInsets.only(left: 24.0 + 8, right: 8.0, top: 8.0, bottom: 8.0),
            child: Floatable(
              float: float,
              padding: padding,
              maxWidthPercentage: _calculateMaxWidthPercentage(element, float),
              child: float == FCFloat.none
                  ? Center(
                      child: ImageEditor(
                        imageElement: element,
                        isSelected: isSelected,
                        onTap: () {
                          setState(() {
                            _selectedIndex = index;

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π float –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                            if (element.alignment == Alignment.centerLeft)
                              _currentImageFloat = FCFloat.start;
                            else if (element.alignment == Alignment.centerRight)
                              _currentImageFloat = FCFloat.end;
                            else
                              _currentImageFloat = FCFloat.none;
                          });
                        },
                        onImageChanged: (newImage) => _updateImageElement(index, newImage),
                        onDelete: () => _removeElement(index),
                      ),
                    )
                  : ImageEditor(
                      imageElement: element,
                      isSelected: isSelected,
                      onTap: () {
                        setState(() {
                          _selectedIndex = index;

                          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π float –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                          if (element.alignment == Alignment.centerLeft)
                            _currentImageFloat = FCFloat.start;
                          else if (element.alignment == Alignment.centerRight)
                            _currentImageFloat = FCFloat.end;
                          else
                            _currentImageFloat = FCFloat.none;
                        });
                      },
                      onImageChanged: (newImage) => _updateImageElement(index, newImage),
                      onDelete: () => _removeElement(index),
                    ),
            ),
          ),
          // –†—É–∫–æ—è—Ç–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          Positioned(
            left: 0,
            top: 0,
            bottom: 0,
            child: ReorderableDragStartListener(
              index: index,
              child: Container(
                width: 24.0,
                alignment: Alignment.center,
                decoration: BoxDecoration(
                  color: isSelected ? Colors.blue.withOpacity(0.1) : Colors.grey.withOpacity(0.1),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(3.0),
                    bottomLeft: Radius.circular(3.0),
                  ),
                ),
                child: Icon(
                  Icons.drag_handle,
                  size: 16.0,
                  color: isSelected ? Colors.blue.withOpacity(0.7) : Colors.grey.withOpacity(0.7),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  List<Widget> _buildDocumentElements() {
    final List<Widget> elements = [];
    final List<InlineSpan> spans = [];
    final editorTheme = EditorThemeExtension.of(context);

    bool hasActiveFloatable = false; // –§–ª–∞–≥, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π Floatable

    for (int i = 0; i < _document.elements.length; i++) {
      final element = _document.elements[i];

      if (element is TextElement) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ WidgetSpan
        spans.add(
          WidgetSpan(
            child: Container(
              margin: EdgeInsets.only(bottom: editorTheme.elementSpacing),
              child: TextEditor(
                key: ValueKey('text_$i'),
                text: element.text,
                style: element.style,
                spans: element.spans,
                isSelected: _selectedIndex == i,
                onTap: () {
                  setState(() {
                    _selectedIndex = i;
                  });
                },
                onTextChanged: (text) => _updateTextElement(i, text),
                onSpansChanged: (newSpans) {
                  // –û–±–Ω–æ–≤–ª—è–µ–º spans –≤ TextElement –Ω–∞–ø—Ä—è–º—É—é
                  if (i >= 0 && i < _document.elements.length && _document.elements[i] is TextElement) {
                    setState(() {
                      final textElement = _document.elements[i] as TextElement;
                      textElement.spans = newSpans;
                      _notifyDocumentChanged();
                    });
                  }
                },
                onSelectionChanged: _handleSelectionChanged,
                onDelete: () => _removeElement(i),
                enableLogging: widget.enableLogging,
                onOverflow: _handleTextOverflow,
              ),
            ),
          ),
        );
      } else if (element is ImageElement) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º float –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        FCFloat float;
        if (element.alignment == Alignment.centerLeft)
          float = FCFloat.start;
        else if (element.alignment == Alignment.centerRight)
          float = FCFloat.end;
        else
          float = FCFloat.none;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è
        EdgeInsets padding;
        if (float == FCFloat.start) {
          padding = EdgeInsets.only(right: editorTheme.elementSpacing, bottom: editorTheme.elementSpacing);
        } else if (float == FCFloat.end) {
          padding = EdgeInsets.only(left: editorTheme.elementSpacing, bottom: editorTheme.elementSpacing);
        } else {
          padding = EdgeInsets.only(bottom: editorTheme.elementSpacing);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ Floatable –≤–Ω—É—Ç—Ä–∏ WidgetSpan
        spans.add(
          WidgetSpan(
            child: Floatable(
              key: ValueKey('image_$i'),
              float: float,
              padding: padding,
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –æ–±—Ç–µ–∫–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              maxWidthPercentage: _calculateMaxWidthPercentage(element, float),
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(
                    color: _selectedIndex == i ? editorTheme.selectedBorderColor : editorTheme.borderColor,
                    width: _selectedIndex == i ? 2.0 : 1.0,
                  ),
                  borderRadius: editorTheme.containerBorderRadius,
                  color: _selectedIndex == i ? editorTheme.selectedBackgroundColor : Colors.transparent,
                ),
                child: float == FCFloat.none
                    ? Center(
                        child: ImageEditor(
                          imageElement: element,
                          isSelected: _selectedIndex == i,
                          onTap: () {
                            setState(() {
                              _selectedIndex = i;

                              // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π float –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                              if (element.alignment == Alignment.centerLeft)
                                _currentImageFloat = FCFloat.start;
                              else if (element.alignment == Alignment.centerRight)
                                _currentImageFloat = FCFloat.end;
                              else
                                _currentImageFloat = FCFloat.none;
                            });
                          },
                          onImageChanged: (newImage) => _updateImageElement(i, newImage),
                          onDelete: () => _removeElement(i),
                        ),
                      )
                    : ImageEditor(
                        imageElement: element,
                        isSelected: _selectedIndex == i,
                        onTap: () {
                          setState(() {
                            _selectedIndex = i;

                            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π float –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                            if (element.alignment == Alignment.centerLeft)
                              _currentImageFloat = FCFloat.start;
                            else if (element.alignment == Alignment.centerRight)
                              _currentImageFloat = FCFloat.end;
                            else
                              _currentImageFloat = FCFloat.none;
                          });
                        },
                        onImageChanged: (newImage) => _updateImageElement(i, newImage),
                        onDelete: () => _removeElement(i),
                      ),
              ),
            ),
          ),
        );
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è spans, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (spans.isNotEmpty) {
      elements.add(Text.rich(TextSpan(children: spans)));
    }

    // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ Floatable, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –≤–º–µ—Å—Ç–æ FloatColumn
    if (!hasActiveFloatable) {
      return [Column(crossAxisAlignment: CrossAxisAlignment.start, children: elements)];
    }

    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º FloatColumn
    return elements;
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç maxWidthPercentage –¥–ª—è Floatable –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  double _calculateMaxWidthPercentage(ImageElement imageElement, FCFloat float) {
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—Ä–æ–≤–Ω–µ–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É (–Ω–µ—Ç –æ–±—Ç–µ–∫–∞–Ω–∏—è), –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É
    if (float == FCFloat.none) {
      return 1.0;
    }

    // –î–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —ç–∫—Ä–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç (0-100) –≤ –¥–æ–ª—é (0.0-1.0)
    return imageElement.sizePercent / 100;
  }

  // –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Ç–∏–ª–µ–º
  void _createNewTextBlock(String text, TextStyleAttributes? style) {
    final effectiveStyle = style ?? TextStyleAttributes();
    _createNewTextBlockWithSpans(text, effectiveStyle, [TextSpanDocument(text: text, style: effectiveStyle)]);
  }

  // –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, —Å—Ç–∏–ª–µ–º –∏ —Å–ø–∞–Ω–∞–º–∏
  void _createNewTextBlockWithSpans(String text, TextStyleAttributes style, List<TextSpanDocument> spans) {
    if (widget.enableLogging) {
      print('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª–∏–Ω–æ–π ${text.length} –∏ ${spans.length} —Å–ø–∞–Ω–∞–º–∏');
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    TextElement newElement = TextElement(text: text, style: style);

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ spans, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–ø–∞–Ω–∞
    if (spans.isNotEmpty) {
      newElement.spans = spans;
      if (widget.enableLogging) {
        print('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã spans –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${spans.length}');
      }
    }

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    if (_selectedIndex != null && _selectedIndex! < _document.elements.length) {
      _document.insertElement(_selectedIndex! + 1, newElement);
      // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫
      setState(() {
        _selectedIndex = _selectedIndex! + 1;
      });
    } else {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –¥–æ–∫—É–º–µ–Ω—Ç–∞
      _document.addElement(newElement);
      setState(() {
        _selectedIndex = _document.elements.length - 1;
      });
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    _notifyDocumentChanged();

    if (widget.enableLogging) {
      print('–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${_selectedIndex}');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ TextEditor
  void _handleTextOverflow(String overflowText) {
    if (widget.enableLogging) {
      print('–ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: ${overflowText.length} —Å–∏–º–≤–æ–ª–æ–≤');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞, –∞ –Ω–µ —Å—Ç–∏–ª—å –≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    TextStyleAttributes currentStyle;
    List<TextSpanDocument> overflowSpans = [];

    if (_selectedIndex != null &&
        _selectedIndex! < _document.elements.length &&
        _document.elements[_selectedIndex!] is TextElement) {
      TextElement textElement = (_document.elements[_selectedIndex!] as TextElement);

      // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∞–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
      // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞, –º—ã –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ —Å—Ç–∏–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
      int? cursorPosition = _selection?.baseOffset;

      if (cursorPosition != null && cursorPosition >= 0 && cursorPosition < textElement.text.length) {
        // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –≤ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
        TextStyleAttributes? styleAtCursor = textElement.styleAt(cursorPosition);

        if (styleAtCursor != null) {
          currentStyle = styleAtCursor;
          if (widget.enableLogging) {
            print(
                '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ ($cursorPosition) –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è: bold=${currentStyle.bold}, italic=${currentStyle.italic}, underline=${currentStyle.underline}, fontSize=${currentStyle.fontSize}');
          }

          // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å–ø–∞–Ω —Å —ç—Ç–∏–º —Å—Ç–∏–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
          overflowSpans = [TextSpanDocument(text: overflowText, style: currentStyle)];
        } else {
          // –ï—Å–ª–∏ —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∞–Ω–∞
          if (textElement.spans.isNotEmpty) {
            currentStyle = textElement.spans.last.style;
            overflowSpans = [TextSpanDocument(text: overflowText, style: currentStyle)];
            if (widget.enableLogging) {
              print(
                  '–°—Ç–∏–ª—å –≤ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∞–Ω–∞: bold=${currentStyle.bold}, italic=${currentStyle.italic}, underline=${currentStyle.underline}, fontSize=${currentStyle.fontSize}');
            }
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∞–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞
            currentStyle = textElement.style;
            overflowSpans = [TextSpanDocument(text: overflowText, style: currentStyle)];
            if (widget.enableLogging) {
              print(
                  '–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç.–∫. –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: bold=${currentStyle.bold}, italic=${currentStyle.italic}, underline=${currentStyle.underline}, fontSize=${currentStyle.fontSize}');
            }
          }
        }
      } else {
        // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∞–Ω–∞
        if (textElement.spans.isNotEmpty) {
          currentStyle = textElement.spans.last.style;
          overflowSpans = [TextSpanDocument(text: overflowText, style: currentStyle)];
          if (widget.enableLogging) {
            print(
                '–ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∞–Ω–∞: bold=${currentStyle.bold}, italic=${currentStyle.italic}, underline=${currentStyle.underline}, fontSize=${currentStyle.fontSize}');
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∞–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞
          currentStyle = textElement.style;
          overflowSpans = [TextSpanDocument(text: overflowText, style: currentStyle)];
          if (widget.enableLogging) {
            print(
                '–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç.–∫. –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: bold=${currentStyle.bold}, italic=${currentStyle.italic}, underline=${currentStyle.underline}, fontSize=${currentStyle.fontSize}');
          }
        }
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      currentStyle = TextStyleAttributes();
      overflowSpans = [TextSpanDocument(text: overflowText, style: currentStyle)];
      if (widget.enableLogging) {
        print(
            '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è: bold=${currentStyle.bold}, italic=${currentStyle.italic}, underline=${currentStyle.underline}, fontSize=${currentStyle.fontSize}');
      }
    }

    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—å—à–µ 9500 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    if (overflowText.length < 9500) {
      _createNewTextBlockWithSpans(overflowText, currentStyle, overflowSpans);
      if (widget.enableLogging) {
        print('–°–æ–∑–¥–∞–Ω –µ–¥–∏–Ω–∏—á–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –¥–ª–∏–Ω–æ–π ${overflowText.length} —Å–∏–º–≤–æ–ª–æ–≤ (<9500)');
      }
      return;
    }

    // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
    final paragraphs = overflowText.split('\n');
    if (paragraphs.length > 1) {
      if (widget.enableLogging) {
        print('–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${paragraphs.length} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –≤ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏');
      }

      // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –∫—Ä—É–ø–Ω—ã–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞, –æ–±—ä–µ–¥–∏–Ω—è—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ~10K
      int currentBlockLength = 0;
      String currentBlock = '';
      final int blockSizeLimit = 9500; // –°—Ç—Ä–µ–º–∏–º—Å—è –∫ ~10K –Ω–∞ –±–ª–æ–∫

      for (int i = 0; i < paragraphs.length; i++) {
        final paragraph = paragraphs[i];

        // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–∞–º –ø–æ —Å–µ–±–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫
        if (paragraph.length > blockSizeLimit) {
          // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
          if (currentBlock.isNotEmpty) {
            _createNewTextBlockWithSpans(
                currentBlock, currentStyle, [TextSpanDocument(text: currentBlock, style: currentStyle)]);
            if (widget.enableLogging) {
              print('–°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –¥–ª–∏–Ω–æ–π ${currentBlock.length} —Å–∏–º–≤–æ–ª–æ–≤');
            }
            currentBlock = '';
            currentBlockLength = 0;
          }

          // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
          _createNewTextBlockWithSpans(
              paragraph, currentStyle, [TextSpanDocument(text: paragraph, style: currentStyle)]);
          if (widget.enableLogging) {
            print('–°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –∏–∑ –±–æ–ª—å—à–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –¥–ª–∏–Ω–æ–π ${paragraph.length} —Å–∏–º–≤–æ–ª–æ–≤');
          }
        } else {
          // –ë—É–¥—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
          int futureBlockLength = currentBlockLength;
          if (currentBlockLength > 0) futureBlockLength += 1; // +1 –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
          futureBlockLength += paragraph.length;

          // –ï—Å–ª–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –±–ª–æ–∫ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
          if (futureBlockLength > blockSizeLimit && currentBlock.isNotEmpty) {
            _createNewTextBlockWithSpans(
                currentBlock, currentStyle, [TextSpanDocument(text: currentBlock, style: currentStyle)]);
            if (widget.enableLogging) {
              print('–°–æ–∑–¥–∞–Ω –±–ª–æ–∫ –¥–ª–∏–Ω–æ–π ${currentBlock.length} —Å–∏–º–≤–æ–ª–æ–≤ (–¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞)');
            }
            currentBlock = paragraph;
            currentBlockLength = paragraph.length;
          } else {
            // –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∫ —Ç–µ–∫—É—â–µ–º—É –±–ª–æ–∫—É
            if (currentBlock.isNotEmpty) {
              currentBlock += '\n' + paragraph;
              currentBlockLength += 1 + paragraph.length;
            } else {
              currentBlock = paragraph;
              currentBlockLength = paragraph.length;
            }
          }
        }
      }

      // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –∏–∑ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (currentBlock.isNotEmpty) {
        _createNewTextBlockWithSpans(
            currentBlock, currentStyle, [TextSpanDocument(text: currentBlock, style: currentStyle)]);
        if (widget.enableLogging) {
          print('–°–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫ –¥–ª–∏–Ω–æ–π ${currentBlock.length} —Å–∏–º–≤–æ–ª–æ–≤');
        }
      }
    } else {
      // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫, —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –±–ª–æ–∫
      _createNewTextBlockWithSpans(overflowText, currentStyle, overflowSpans);
      if (widget.enableLogging) {
        print('–°–æ–∑–¥–∞–Ω –µ–¥–∏–Ω–∏—á–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª–∏–Ω–æ–π ${overflowText.length} —Å–∏–º–≤–æ–ª–æ–≤');
      }
    }
  }
}
